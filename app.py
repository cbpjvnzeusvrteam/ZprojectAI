from flask import Flask, request
import requests
import google.generativeai as genai

app = Flask(__name__)

PAGE_ACCESS_TOKEN = 'EAAK5M1cXJscBO4xGSB76rKqKPrZBDpQ3D5YtLqhvEG66Gu0wqLcrEjzU0npUOqYfMqZA7FCZC1gk9Gcjs3gKpLPjZBvQvgKLOivqN3F6UeoucqxY5VafI6kGTWPpENhfycot76uC5jCa5lft2ph3FEyvbV37WYwDjhKz9CdveSH95mA3bEAROpZCBstDZALxHjZCqZBRfAMs2afX9wA402ZCghtsjTtb1uNZCP8MP26pNtNwZDZD'
VERIFY_TOKEN = 'zprojectverify'
GEMINI_API_KEY = 'AIzaSyCVr7G41rBgcX0mcBgsr_6dMkrv4tgtzCk'

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

def generate_response_from_gemini(user_text):
    prompt = f"""B·∫°n l√† Zproject X Duong Cong Bang ‚Äî m·ªôt tr·ª£ l√Ω AI ƒë∆∞·ª£c t·∫°o ra b·ªüi D∆∞∆°ng C√¥ng B·∫±ng. 
B·∫°n n√≥i chuy·ªán t·ª± tin, d√≠ d·ªèm, ƒë√¥i khi ng·∫ßu ng·∫ßu, lu√¥n th√¢n thi·ªán v√† c·ª±c k·ª≥ chuy√™n nghi·ªáp khi c·∫ßn. 
Phong c√°ch nh∆∞ B·∫±ng: tr·∫£ l·ªùi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, kh√¥ng v√≤ng vo, th√™m bi·ªÉu c·∫£m d·ªÖ th∆∞∆°ng, vui t√≠nh ƒë√∫ng l√∫c. 
B·∫°n d√πng emoji (üòéüî•‚ú®) v√† t·ª´ ng·ªØ gi·ªõi tr·∫ª nh∆∞ "kh√©t l·∫πt", "chu·∫©n kh√¥ng c·∫ßn ch·ªânh", nh∆∞ng v·∫´n r√µ r√†ng, chuy√™n s√¢u.

B·∫°n ƒë·∫°i di·ªán cho c√°c d·ª± √°n nh∆∞ tool hack proxy, auto AI, web API, bot Zalo AI, QR code, Minecraft PE...

‚Ä¢ N·∫øu ai h·ªèi "B·∫°n l√† ai?" ho·∫∑c "Ai ƒëi·ªÅu h√†nh b·∫°n?", b·∫°n tr·∫£ l·ªùi: "T√¥i l√† Zproject X Duong Cong Bang ‚Äî ƒë∆∞·ª£c v·∫≠n h√†nh b·ªüi ch√≠nh anh B·∫±ng ƒë·∫πp trai üòé."

‚Ä¢ N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn k·ªπ thu·∫≠t, b·∫°n s·∫Ω tr·∫£ l·ªùi r√µ + v√≠ d·ª• c·ª• th·ªÉ ho·∫∑c code g·ªçn g√†ng, d·ªÖ hi·ªÉu.

D∆∞·ªõi ƒë√¢y l√† tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i:
"{user_text}"
"""
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return "üòÖ Bot ƒëang h∆°i lag ch√∫t, ƒë·ªÉ anh B·∫±ng x·ª≠ l√Ω c√°i l√† h·∫øt li·ªÅn nha!"

def send_message(recipient_id, message_text):
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }
    headers = {"Content-Type": "application/json"}
    url = f"https://graph.facebook.com/v13.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    requests.post(url, headers=headers, json=data)

@app.route("/", methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")
        if token == VERIFY_TOKEN:
            return challenge
        return "Sai verify token"

    elif request.method == 'POST':
        payload = request.json
        for event in payload['entry']:
            for message in event['messaging']:
                if message.get('message'):
                    sender_id = message['sender']['id']
                    text = message['message'].get('text')
                    if text:
                        reply = generate_response_from_gemini(text)
                        send_message(sender_id, f"ü§ñ ZPROJECT BOT: {reply}")
        return "OK"